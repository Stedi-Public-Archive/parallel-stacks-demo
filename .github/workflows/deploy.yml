# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Deploy
on:
  workflow_dispatch: {}
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set git identity
        run: |-
          git config user.name "Automation"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Anti-tamper check
        run: git diff --exit-code
      - name: Build
        run: npx projen build
      - name: Anti-tamper check
        run: git diff --exit-code
  Secrets_demo:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: demo
    concurrency:
      group: Secrets_demo
      cancel-in-progress: false
    env:
      STAGE: demo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.XXX }}
          role-duration-seconds: 1200
      - name: Deploy Secrets-demo
        run: unset USER; npx cdk deploy --exclusively Secrets-demo --require-approval never -O .stack-outputs.json
  Datastore_demo:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: demo
    concurrency:
      group: Datastore_demo
      cancel-in-progress: false
    env:
      STAGE: demo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.XXX }}
          role-duration-seconds: 1200
      - name: Deploy Datastore-demo
        run: unset USER; npx cdk deploy --exclusively Datastore-demo --require-approval never -O .stack-outputs.json
  Async_demo:
    needs:
      - build
      - Datastore_demo
      - Secrets_demo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: demo
    concurrency:
      group: Async_demo
      cancel-in-progress: false
    env:
      STAGE: demo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.XXX }}
          role-duration-seconds: 1200
      - name: Deploy Async-demo
        run: unset USER; npx cdk deploy --exclusively Async-demo --require-approval never -O .stack-outputs.json
  BillingApi_demo:
    needs:
      - build
      - Datastore_demo
      - Secrets_demo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: demo
    concurrency:
      group: BillingApi_demo
      cancel-in-progress: false
    env:
      STAGE: demo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.XXX }}
          role-duration-seconds: 1200
      - name: Deploy BillingApi-demo
        run: unset USER; npx cdk deploy --exclusively BillingApi-demo --require-approval never -O .stack-outputs.json
  Dashboards_demo:
    needs:
      - build
      - Async_demo
      - BillingApi_demo
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    environment: demo
    concurrency:
      group: Dashboards_demo
      cancel-in-progress: false
    env:
      STAGE: demo
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with: {}
      - name: Cache Node Modules
        id: cache-node
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        run: npm ci
        if: steps.cache-node.outputs.cache-hit != 'true'
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.XXX }}
          role-duration-seconds: 1200
      - name: Deploy Dashboards-demo
        run: unset USER; npx cdk deploy --exclusively Dashboards-demo --require-approval never -O .stack-outputs.json
